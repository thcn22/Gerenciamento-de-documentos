import { DocumentDB } from '../services/db.js';

async function main() {
  const docs = DocumentDB.all() as any[];
  let fixed = 0;
  
  console.log("üîß Corrigindo caracteres divergentes espec√≠ficos...\n");
  
  for (const doc of docs) {
    const originalName = doc.name;
    if (!originalName) continue;
    
    let correctedName = originalName;
    let needsUpdate = false;
    
    // Verificar se tem bytes problem√°ticos espec√≠ficos detectados
    const bytes = Buffer.from(originalName, 'utf8');
    let hasProblems = false;
    
    for (let i = 0; i < bytes.length; i++) {
      // Byte 193 = √Å mal codificado
      if (bytes[i] === 193) {
        hasProblems = true;
        break;
      }
      // Sequ√™ncia 194,174 = ¬Æ mal codificado
      if (bytes[i] === 194 && i < bytes.length - 1 && bytes[i + 1] === 174) {
        hasProblems = true;
        break;
      }
    }
    
    if (hasProblems) {
      // Corrigir byte a byte os caracteres problem√°ticos
      let correctedBytes = [];
      
      for (let i = 0; i < bytes.length; i++) {
        const byte = bytes[i];
        const nextByte = i < bytes.length - 1 ? bytes[i + 1] : null;
        
        if (byte === 193) {
          // Substituir byte 193 por √Å correto (195, 129)
          correctedBytes.push(195, 129);
          needsUpdate = true;
        } else if (byte === 194 && nextByte === 174) {
          // Substituir sequ√™ncia 194,174 por ¬Æ correto (194, 174 ‚Üí 194, 174 √© correto, mas verificar contexto)
          correctedBytes.push(194, 174);
          i++; // pular pr√≥ximo byte
        } else {
          correctedBytes.push(byte);
        }
      }
      
      if (needsUpdate) {
        try {
          correctedName = Buffer.from(correctedBytes).toString('utf8');
        } catch (e) {
          console.log(`‚ùå Erro ao corrigir "${originalName}": ${e}`);
          continue;
        }
      }
    }
    
    // Fix specific mojibake sequences found in the data
    if (originalName.includes('SENSIBILIZA√É√ÉO')) {
      correctedName = correctedName.replace('SENSIBILIZA√É√ÉO', 'SENSIBILIZA√á√ÉO');
      needsUpdate = true;
    }
    
    if (originalName.includes('IRRITA√É√ÉO')) {
      correctedName = correctedName.replace('IRRITA√É√ÉO', 'IRRITA√á√ÉO');
      needsUpdate = true;
    }
    
    if (originalName.includes('D√ÉRMICA')) {
      correctedName = correctedName.replace('D√ÉRMICA', 'D√âRMICA');
      needsUpdate = true;
    }
    
    // 193 = √Å (cat√°logo)
    // 174 = ¬Æ (registered trademark)
    // These appear to already be correct in the latest data
    
    // Apply generic fixes for any remaining issues
    const genericFixes: [string, string][] = [
      ['√É¬°', '√°'], ['√É ', '√†'], ['√É¬£', '√£'], ['√É¬¢', '√¢'],
      ['√É¬©', '√©'], ['√É¬™', '√™'], ['√É¬≠', '√≠'], ['√É¬≥', '√≥'],
      ['√É¬µ', '√µ'], ['√É¬¥', '√¥'], ['√É¬∫', '√∫'], ['√É¬ß', '√ß'],
      ['√É√É', '√Å'], ['√É‚Ä∞', '√â'], ['√É‚Ä°', '√á'],
      ['√Ç¬Æ', '¬Æ'], ['√Ç¬©', '¬©']
    ];
    
    for (const [mojibake, correct] of genericFixes) {
      if (correctedName.includes(mojibake)) {
        correctedName = correctedName.replace(new RegExp(mojibake.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), correct);
        needsUpdate = true;
      }
    }
    
    if (needsUpdate && correctedName !== originalName) {
      const updated = { ...doc, originalName: correctedName };
      DocumentDB.update(updated);
      fixed++;
      console.log(`‚úÖ Corrigido: "${originalName}" ‚Üí "${correctedName}"`);
    } else if (hasProblems && !needsUpdate) {
      console.log(`‚ö†Ô∏è Problema detectado mas n√£o corrigido: "${originalName}"`);
      console.log(`   Bytes: [${Array.from(Buffer.from(originalName, 'utf8')).slice(0, 20).join(', ')}...]`);
    }
  }
  
  console.log(`\nüìä Resumo:`);
  console.log(`   ‚úÖ Registros corrigidos: ${fixed}`);
  console.log(`   üìÑ Total processado: ${docs.length}`);
  console.log("\nüéâ Corre√ß√£o conclu√≠da!");
}

main().catch(console.error);
